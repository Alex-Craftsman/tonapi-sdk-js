"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * REST api to TON blockchain explorer
 * Provide access to indexed TON blockchain
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@tonkeeper.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.NftItemTransferActionToJSON = exports.NftItemTransferActionFromJSONTyped = exports.NftItemTransferActionFromJSON = exports.instanceOfNftItemTransferAction = void 0;
const runtime_1 = require("../runtime");
const AccountAddress_1 = require("./AccountAddress");
const EncryptedComment_1 = require("./EncryptedComment");
const Refund_1 = require("./Refund");
/**
 * Check if a given object implements the NftItemTransferAction interface.
 */
function instanceOfNftItemTransferAction(value) {
    let isInstance = true;
    isInstance = isInstance && "nft" in value;
    return isInstance;
}
exports.instanceOfNftItemTransferAction = instanceOfNftItemTransferAction;
function NftItemTransferActionFromJSON(json) {
    return NftItemTransferActionFromJSONTyped(json, false);
}
exports.NftItemTransferActionFromJSON = NftItemTransferActionFromJSON;
function NftItemTransferActionFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'sender': !(0, runtime_1.exists)(json, 'sender') ? undefined : (0, AccountAddress_1.AccountAddressFromJSON)(json['sender']),
        'recipient': !(0, runtime_1.exists)(json, 'recipient') ? undefined : (0, AccountAddress_1.AccountAddressFromJSON)(json['recipient']),
        'nft': json['nft'],
        'comment': !(0, runtime_1.exists)(json, 'comment') ? undefined : json['comment'],
        'encryptedComment': !(0, runtime_1.exists)(json, 'encrypted_comment') ? undefined : (0, EncryptedComment_1.EncryptedCommentFromJSON)(json['encrypted_comment']),
        'payload': !(0, runtime_1.exists)(json, 'payload') ? undefined : json['payload'],
        'refund': !(0, runtime_1.exists)(json, 'refund') ? undefined : (0, Refund_1.RefundFromJSON)(json['refund']),
    };
}
exports.NftItemTransferActionFromJSONTyped = NftItemTransferActionFromJSONTyped;
function NftItemTransferActionToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'sender': (0, AccountAddress_1.AccountAddressToJSON)(value.sender),
        'recipient': (0, AccountAddress_1.AccountAddressToJSON)(value.recipient),
        'nft': value.nft,
        'comment': value.comment,
        'encrypted_comment': (0, EncryptedComment_1.EncryptedCommentToJSON)(value.encryptedComment),
        'payload': value.payload,
        'refund': (0, Refund_1.RefundToJSON)(value.refund),
    };
}
exports.NftItemTransferActionToJSON = NftItemTransferActionToJSON;
