"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * REST api to TON blockchain explorer
 * Provide access to indexed TON blockchain
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@fslabs.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.NftItemReprToJSON = exports.NftItemReprFromJSONTyped = exports.NftItemReprFromJSON = exports.instanceOfNftItemRepr = void 0;
const runtime_1 = require("../runtime");
const AccountAddress_1 = require("./AccountAddress");
const ImagePreview_1 = require("./ImagePreview");
const Sale_1 = require("./Sale");
/**
 * Check if a given object implements the NftItemRepr interface.
 */
function instanceOfNftItemRepr(value) {
    let isInstance = true;
    isInstance = isInstance && "address" in value;
    isInstance = isInstance && "index" in value;
    isInstance = isInstance && "verified" in value;
    return isInstance;
}
exports.instanceOfNftItemRepr = instanceOfNftItemRepr;
function NftItemReprFromJSON(json) {
    return NftItemReprFromJSONTyped(json, false);
}
exports.NftItemReprFromJSON = NftItemReprFromJSON;
function NftItemReprFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'address': json['address'],
        'collectionAddress': !(0, runtime_1.exists)(json, 'collection_address') ? undefined : json['collection_address'],
        'index': json['index'],
        'metadata': !(0, runtime_1.exists)(json, 'metadata') ? undefined : json['metadata'],
        'owner': !(0, runtime_1.exists)(json, 'owner') ? undefined : (0, AccountAddress_1.AccountAddressFromJSON)(json['owner']),
        'previews': !(0, runtime_1.exists)(json, 'previews') ? undefined : (json['previews'].map(ImagePreview_1.ImagePreviewFromJSON)),
        'sale': !(0, runtime_1.exists)(json, 'sale') ? undefined : (0, Sale_1.SaleFromJSON)(json['sale']),
        'verified': json['verified'],
    };
}
exports.NftItemReprFromJSONTyped = NftItemReprFromJSONTyped;
function NftItemReprToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'address': value.address,
        'collection_address': value.collectionAddress,
        'index': value.index,
        'metadata': value.metadata,
        'owner': (0, AccountAddress_1.AccountAddressToJSON)(value.owner),
        'previews': value.previews === undefined ? undefined : (value.previews.map(ImagePreview_1.ImagePreviewToJSON)),
        'sale': (0, Sale_1.SaleToJSON)(value.sale),
        'verified': value.verified,
    };
}
exports.NftItemReprToJSON = NftItemReprToJSON;
