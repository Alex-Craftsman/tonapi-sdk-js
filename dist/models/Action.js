"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * REST api to TON blockchain explorer
 * Provide access to indexed TON blockchain
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@fslabs.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ActionToJSON = exports.ActionFromJSONTyped = exports.ActionFromJSON = exports.instanceOfAction = exports.ActionTypeEnum = exports.ActionStatusEnum = void 0;
const runtime_1 = require("../runtime");
const JettonTransferAction_1 = require("./JettonTransferAction");
const TonTransferAction_1 = require("./TonTransferAction");
/**
 * @export
 */
exports.ActionStatusEnum = {
    Ok: 'ok',
    Failed: 'failed',
    Pending: 'pending'
};
/**
 * @export
 */
exports.ActionTypeEnum = {
    TonTransfer: 'TonTransfer',
    JettonTransfer: 'JettonTransfer',
    NftTransfer: 'NftTransfer',
    Unknown: 'Unknown'
};
/**
 * Check if a given object implements the Action interface.
 */
function instanceOfAction(value) {
    let isInstance = true;
    isInstance = isInstance && "status" in value;
    isInstance = isInstance && "type" in value;
    return isInstance;
}
exports.instanceOfAction = instanceOfAction;
function ActionFromJSON(json) {
    return ActionFromJSONTyped(json, false);
}
exports.ActionFromJSON = ActionFromJSON;
function ActionFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'jettonTransfer': !(0, runtime_1.exists)(json, 'JettonTransfer') ? undefined : (0, JettonTransferAction_1.JettonTransferActionFromJSON)(json['JettonTransfer']),
        'tonTransfer': !(0, runtime_1.exists)(json, 'TonTransfer') ? undefined : (0, TonTransferAction_1.TonTransferActionFromJSON)(json['TonTransfer']),
        'status': json['status'],
        'type': json['type'],
    };
}
exports.ActionFromJSONTyped = ActionFromJSONTyped;
function ActionToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'JettonTransfer': (0, JettonTransferAction_1.JettonTransferActionToJSON)(value.jettonTransfer),
        'TonTransfer': (0, TonTransferAction_1.TonTransferActionToJSON)(value.tonTransfer),
        'status': value.status,
        'type': value.type,
    };
}
exports.ActionToJSON = ActionToJSON;
