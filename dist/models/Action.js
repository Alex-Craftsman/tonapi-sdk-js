"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * REST api to TON blockchain explorer
 * Provide access to indexed TON blockchain
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@tonkeeper.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ActionToJSON = exports.ActionFromJSONTyped = exports.ActionFromJSON = exports.instanceOfAction = exports.ActionStatusEnum = exports.ActionTypeEnum = void 0;
const runtime_1 = require("../runtime");
const ActionSimplePreview_1 = require("./ActionSimplePreview");
const AuctionBidAction_1 = require("./AuctionBidAction");
const ContractDeployAction_1 = require("./ContractDeployAction");
const DepositStakeAction_1 = require("./DepositStakeAction");
const JettonSwapAction_1 = require("./JettonSwapAction");
const JettonTransferAction_1 = require("./JettonTransferAction");
const NftItemTransferAction_1 = require("./NftItemTransferAction");
const NftPurchaseAction_1 = require("./NftPurchaseAction");
const RecoverStakeAction_1 = require("./RecoverStakeAction");
const SmartContractAction_1 = require("./SmartContractAction");
const SubscriptionAction_1 = require("./SubscriptionAction");
const TonTransferAction_1 = require("./TonTransferAction");
const UnSubscriptionAction_1 = require("./UnSubscriptionAction");
/**
 * @export
 */
exports.ActionTypeEnum = {
    TonTransfer: 'TonTransfer',
    JettonTransfer: 'JettonTransfer',
    NftItemTransfer: 'NftItemTransfer',
    ContractDeploy: 'ContractDeploy',
    Subscribe: 'Subscribe',
    UnSubscribe: 'UnSubscribe',
    AuctionBid: 'AuctionBid',
    NftPurchase: 'NftPurchase',
    DepositStake: 'DepositStake',
    RecoverStake: 'RecoverStake',
    JettonSwap: 'JettonSwap',
    SmartContractExec: 'SmartContractExec',
    Unknown: 'Unknown'
};
/**
 * @export
 */
exports.ActionStatusEnum = {
    Ok: 'ok',
    Failed: 'failed'
};
/**
 * Check if a given object implements the Action interface.
 */
function instanceOfAction(value) {
    let isInstance = true;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "status" in value;
    isInstance = isInstance && "simplePreview" in value;
    return isInstance;
}
exports.instanceOfAction = instanceOfAction;
function ActionFromJSON(json) {
    return ActionFromJSONTyped(json, false);
}
exports.ActionFromJSON = ActionFromJSON;
function ActionFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'type': json['type'],
        'status': json['status'],
        'tonTransfer': !(0, runtime_1.exists)(json, 'TonTransfer') ? undefined : (0, TonTransferAction_1.TonTransferActionFromJSON)(json['TonTransfer']),
        'contractDeploy': !(0, runtime_1.exists)(json, 'ContractDeploy') ? undefined : (0, ContractDeployAction_1.ContractDeployActionFromJSON)(json['ContractDeploy']),
        'jettonTransfer': !(0, runtime_1.exists)(json, 'JettonTransfer') ? undefined : (0, JettonTransferAction_1.JettonTransferActionFromJSON)(json['JettonTransfer']),
        'nftItemTransfer': !(0, runtime_1.exists)(json, 'NftItemTransfer') ? undefined : (0, NftItemTransferAction_1.NftItemTransferActionFromJSON)(json['NftItemTransfer']),
        'subscribe': !(0, runtime_1.exists)(json, 'Subscribe') ? undefined : (0, SubscriptionAction_1.SubscriptionActionFromJSON)(json['Subscribe']),
        'unSubscribe': !(0, runtime_1.exists)(json, 'UnSubscribe') ? undefined : (0, UnSubscriptionAction_1.UnSubscriptionActionFromJSON)(json['UnSubscribe']),
        'auctionBid': !(0, runtime_1.exists)(json, 'AuctionBid') ? undefined : (0, AuctionBidAction_1.AuctionBidActionFromJSON)(json['AuctionBid']),
        'nftPurchase': !(0, runtime_1.exists)(json, 'NftPurchase') ? undefined : (0, NftPurchaseAction_1.NftPurchaseActionFromJSON)(json['NftPurchase']),
        'depositStake': !(0, runtime_1.exists)(json, 'DepositStake') ? undefined : (0, DepositStakeAction_1.DepositStakeActionFromJSON)(json['DepositStake']),
        'recoverStake': !(0, runtime_1.exists)(json, 'RecoverStake') ? undefined : (0, RecoverStakeAction_1.RecoverStakeActionFromJSON)(json['RecoverStake']),
        'jettonSwap': !(0, runtime_1.exists)(json, 'JettonSwap') ? undefined : (0, JettonSwapAction_1.JettonSwapActionFromJSON)(json['JettonSwap']),
        'smartContractExec': !(0, runtime_1.exists)(json, 'SmartContractExec') ? undefined : (0, SmartContractAction_1.SmartContractActionFromJSON)(json['SmartContractExec']),
        'simplePreview': (0, ActionSimplePreview_1.ActionSimplePreviewFromJSON)(json['simple_preview']),
    };
}
exports.ActionFromJSONTyped = ActionFromJSONTyped;
function ActionToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'type': value.type,
        'status': value.status,
        'TonTransfer': (0, TonTransferAction_1.TonTransferActionToJSON)(value.tonTransfer),
        'ContractDeploy': (0, ContractDeployAction_1.ContractDeployActionToJSON)(value.contractDeploy),
        'JettonTransfer': (0, JettonTransferAction_1.JettonTransferActionToJSON)(value.jettonTransfer),
        'NftItemTransfer': (0, NftItemTransferAction_1.NftItemTransferActionToJSON)(value.nftItemTransfer),
        'Subscribe': (0, SubscriptionAction_1.SubscriptionActionToJSON)(value.subscribe),
        'UnSubscribe': (0, UnSubscriptionAction_1.UnSubscriptionActionToJSON)(value.unSubscribe),
        'AuctionBid': (0, AuctionBidAction_1.AuctionBidActionToJSON)(value.auctionBid),
        'NftPurchase': (0, NftPurchaseAction_1.NftPurchaseActionToJSON)(value.nftPurchase),
        'DepositStake': (0, DepositStakeAction_1.DepositStakeActionToJSON)(value.depositStake),
        'RecoverStake': (0, RecoverStakeAction_1.RecoverStakeActionToJSON)(value.recoverStake),
        'JettonSwap': (0, JettonSwapAction_1.JettonSwapActionToJSON)(value.jettonSwap),
        'SmartContractExec': (0, SmartContractAction_1.SmartContractActionToJSON)(value.smartContractExec),
        'simple_preview': (0, ActionSimplePreview_1.ActionSimplePreviewToJSON)(value.simplePreview),
    };
}
exports.ActionToJSON = ActionToJSON;
