"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * REST api to TON blockchain explorer
 * Provide access to indexed TON blockchain
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@tonkeeper.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.NftPurchaseActionToJSON = exports.NftPurchaseActionFromJSONTyped = exports.NftPurchaseActionFromJSON = exports.instanceOfNftPurchaseAction = exports.NftPurchaseActionAuctionTypeEnum = void 0;
const AccountAddress_1 = require("./AccountAddress");
const NftItem_1 = require("./NftItem");
const Price_1 = require("./Price");
/**
 * @export
 */
exports.NftPurchaseActionAuctionTypeEnum = {
    DnsTg: 'DNS.tg',
    Getgems: 'getgems',
    Basic: 'basic'
};
/**
 * Check if a given object implements the NftPurchaseAction interface.
 */
function instanceOfNftPurchaseAction(value) {
    let isInstance = true;
    isInstance = isInstance && "auctionType" in value;
    isInstance = isInstance && "amount" in value;
    isInstance = isInstance && "nft" in value;
    isInstance = isInstance && "seller" in value;
    isInstance = isInstance && "buyer" in value;
    return isInstance;
}
exports.instanceOfNftPurchaseAction = instanceOfNftPurchaseAction;
function NftPurchaseActionFromJSON(json) {
    return NftPurchaseActionFromJSONTyped(json, false);
}
exports.NftPurchaseActionFromJSON = NftPurchaseActionFromJSON;
function NftPurchaseActionFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'auctionType': json['auction_type'],
        'amount': (0, Price_1.PriceFromJSON)(json['amount']),
        'nft': (0, NftItem_1.NftItemFromJSON)(json['nft']),
        'seller': (0, AccountAddress_1.AccountAddressFromJSON)(json['seller']),
        'buyer': (0, AccountAddress_1.AccountAddressFromJSON)(json['buyer']),
    };
}
exports.NftPurchaseActionFromJSONTyped = NftPurchaseActionFromJSONTyped;
function NftPurchaseActionToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'auction_type': value.auctionType,
        'amount': (0, Price_1.PriceToJSON)(value.amount),
        'nft': (0, NftItem_1.NftItemToJSON)(value.nft),
        'seller': (0, AccountAddress_1.AccountAddressToJSON)(value.seller),
        'buyer': (0, AccountAddress_1.AccountAddressToJSON)(value.buyer),
    };
}
exports.NftPurchaseActionToJSON = NftPurchaseActionToJSON;
