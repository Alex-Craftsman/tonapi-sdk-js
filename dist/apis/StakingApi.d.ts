/**
 * REST api to TON blockchain explorer
 * Provide access to indexed TON blockchain
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@tonkeeper.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { AccountStaking, StakingPoolHistory200Response, StakingPoolInfo200Response, StakingPools200Response } from '../models/index';
export interface PoolsByNominatorsRequest {
    accountId: string;
}
export interface StakingPoolHistoryRequest {
    accountId: string;
}
export interface StakingPoolInfoRequest {
    accountId: string;
    acceptLanguage?: string;
}
export interface StakingPoolsRequest {
    availableFor?: string;
    includeUnverified?: boolean;
    acceptLanguage?: string;
}
/**
 * StakingApi - interface
 *
 * @export
 * @interface StakingApiInterface
 */
export interface StakingApiInterface {
    /**
     * All pools where account participates
     * @param {string} accountId account ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApiInterface
     */
    poolsByNominatorsRaw(requestParameters: PoolsByNominatorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccountStaking>>;
    /**
     * All pools where account participates
     */
    poolsByNominators(requestParameters: PoolsByNominatorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccountStaking>;
    /**
     * Pool info
     * @param {string} accountId account ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApiInterface
     */
    stakingPoolHistoryRaw(requestParameters: StakingPoolHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StakingPoolHistory200Response>>;
    /**
     * Pool info
     */
    stakingPoolHistory(requestParameters: StakingPoolHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StakingPoolHistory200Response>;
    /**
     * Pool info
     * @param {string} accountId account ID
     * @param {string} [acceptLanguage]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApiInterface
     */
    stakingPoolInfoRaw(requestParameters: StakingPoolInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StakingPoolInfo200Response>>;
    /**
     * Pool info
     */
    stakingPoolInfo(requestParameters: StakingPoolInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StakingPoolInfo200Response>;
    /**
     * All pools available in network
     * @param {string} [availableFor] account ID
     * @param {boolean} [includeUnverified] return also pools not from white list - just compatible by interfaces (maybe dangerous!)
     * @param {string} [acceptLanguage]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApiInterface
     */
    stakingPoolsRaw(requestParameters: StakingPoolsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StakingPools200Response>>;
    /**
     * All pools available in network
     */
    stakingPools(requestParameters: StakingPoolsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StakingPools200Response>;
}
/**
 *
 */
export declare class StakingApi extends runtime.BaseAPI implements StakingApiInterface {
    /**
     * All pools where account participates
     */
    poolsByNominatorsRaw(requestParameters: PoolsByNominatorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccountStaking>>;
    /**
     * All pools where account participates
     */
    poolsByNominators(requestParameters: PoolsByNominatorsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccountStaking>;
    /**
     * Pool info
     */
    stakingPoolHistoryRaw(requestParameters: StakingPoolHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StakingPoolHistory200Response>>;
    /**
     * Pool info
     */
    stakingPoolHistory(requestParameters: StakingPoolHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StakingPoolHistory200Response>;
    /**
     * Pool info
     */
    stakingPoolInfoRaw(requestParameters: StakingPoolInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StakingPoolInfo200Response>>;
    /**
     * Pool info
     */
    stakingPoolInfo(requestParameters: StakingPoolInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StakingPoolInfo200Response>;
    /**
     * All pools available in network
     */
    stakingPoolsRaw(requestParameters: StakingPoolsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StakingPools200Response>>;
    /**
     * All pools available in network
     */
    stakingPools(requestParameters?: StakingPoolsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StakingPools200Response>;
}
