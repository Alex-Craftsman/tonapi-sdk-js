/**
 * REST api to TON blockchain explorer
 * Provide access to indexed TON blockchain
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@tonkeeper.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { AccountStaking, GetStakingPoolHistory200Response, GetStakingPoolInfo200Response, GetStakingPools200Response } from '../models/index';
export interface GetAccountNominatorsPoolsRequest {
    accountId: string;
}
export interface GetStakingPoolHistoryRequest {
    accountId: string;
}
export interface GetStakingPoolInfoRequest {
    accountId: string;
    acceptLanguage?: string;
}
export interface GetStakingPoolsRequest {
    availableFor?: string;
    includeUnverified?: boolean;
    acceptLanguage?: string;
}
/**
 * StakingApi - interface
 *
 * @export
 * @interface StakingApiInterface
 */
export interface StakingApiInterface {
    /**
     * All pools where account participates
     * @param {string} accountId account ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApiInterface
     */
    getAccountNominatorsPoolsRaw(requestParameters: GetAccountNominatorsPoolsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccountStaking>>;
    /**
     * All pools where account participates
     */
    getAccountNominatorsPools(requestParameters: GetAccountNominatorsPoolsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccountStaking>;
    /**
     * Pool history
     * @param {string} accountId account ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApiInterface
     */
    getStakingPoolHistoryRaw(requestParameters: GetStakingPoolHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetStakingPoolHistory200Response>>;
    /**
     * Pool history
     */
    getStakingPoolHistory(requestParameters: GetStakingPoolHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetStakingPoolHistory200Response>;
    /**
     * Stacking pool info
     * @param {string} accountId account ID
     * @param {string} [acceptLanguage]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApiInterface
     */
    getStakingPoolInfoRaw(requestParameters: GetStakingPoolInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetStakingPoolInfo200Response>>;
    /**
     * Stacking pool info
     */
    getStakingPoolInfo(requestParameters: GetStakingPoolInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetStakingPoolInfo200Response>;
    /**
     * All pools available in network
     * @param {string} [availableFor] account ID
     * @param {boolean} [includeUnverified] return also pools not from white list - just compatible by interfaces (maybe dangerous!)
     * @param {string} [acceptLanguage]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApiInterface
     */
    getStakingPoolsRaw(requestParameters: GetStakingPoolsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetStakingPools200Response>>;
    /**
     * All pools available in network
     */
    getStakingPools(requestParameters: GetStakingPoolsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetStakingPools200Response>;
}
/**
 *
 */
export declare class StakingApi extends runtime.BaseAPI implements StakingApiInterface {
    /**
     * All pools where account participates
     */
    getAccountNominatorsPoolsRaw(requestParameters: GetAccountNominatorsPoolsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccountStaking>>;
    /**
     * All pools where account participates
     */
    getAccountNominatorsPools(requestParameters: GetAccountNominatorsPoolsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccountStaking>;
    /**
     * Pool history
     */
    getStakingPoolHistoryRaw(requestParameters: GetStakingPoolHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetStakingPoolHistory200Response>>;
    /**
     * Pool history
     */
    getStakingPoolHistory(requestParameters: GetStakingPoolHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetStakingPoolHistory200Response>;
    /**
     * Stacking pool info
     */
    getStakingPoolInfoRaw(requestParameters: GetStakingPoolInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetStakingPoolInfo200Response>>;
    /**
     * Stacking pool info
     */
    getStakingPoolInfo(requestParameters: GetStakingPoolInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetStakingPoolInfo200Response>;
    /**
     * All pools available in network
     */
    getStakingPoolsRaw(requestParameters: GetStakingPoolsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetStakingPools200Response>>;
    /**
     * All pools available in network
     */
    getStakingPools(requestParameters?: GetStakingPoolsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetStakingPools200Response>;
}
