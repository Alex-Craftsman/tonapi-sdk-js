"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * REST api to TON blockchain explorer
 * Provide access to indexed TON blockchain
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@fslabs.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AccountsApi = void 0;
const runtime = require("../runtime");
const models_1 = require("../models");
/**
 *
 */
class AccountsApi extends runtime.BaseAPI {
    /**
     * Get domains for wallet account
     */
    dnsBackResolveRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
                throw new runtime.RequiredError('accountId', 'Required parameter requestParameters.accountId was null or undefined when calling dnsBackResolve.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/v2/accounts/{account_id}/dns/backresolve`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.DomainNamesFromJSON)(jsonValue));
        });
    }
    /**
     * Get domains for wallet account
     */
    dnsBackResolve(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.dnsBackResolveRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get human-friendly information about an account without low-level details.
     */
    getAccountRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
                throw new runtime.RequiredError('accountId', 'Required parameter requestParameters.accountId was null or undefined when calling getAccount.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/v2/accounts/{account_id}`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AccountFromJSON)(jsonValue));
        });
    }
    /**
     * Get human-friendly information about an account without low-level details.
     */
    getAccount(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getAccountRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get human-friendly information about several accounts without low-level details.
     */
    getAccountsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/v2/accounts/_bulk`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.GetAccountsRequestToJSON)(requestParameters.getAccountsRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AccountsFromJSON)(jsonValue));
        });
    }
    /**
     * Get human-friendly information about several accounts without low-level details.
     */
    getAccounts(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getAccountsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get events for an account. Each event is built on top of a trace which is a series of transactions caused by one inbound message. TonAPI looks for known patterns inside the trace and splits the trace into actions, where a single action represents a meaningful high-level operation like a Jetton Transfer or an NFT Purchase. Actions are expected to be shown to users. It is advised not to build any logic on top of actions because actions can be changed at any time.
     */
    getEventsByAccountRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
                throw new runtime.RequiredError('accountId', 'Required parameter requestParameters.accountId was null or undefined when calling getEventsByAccount.');
            }
            if (requestParameters.limit === null || requestParameters.limit === undefined) {
                throw new runtime.RequiredError('limit', 'Required parameter requestParameters.limit was null or undefined when calling getEventsByAccount.');
            }
            const queryParameters = {};
            if (requestParameters.beforeLt !== undefined) {
                queryParameters['before_lt'] = requestParameters.beforeLt;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.startDate !== undefined) {
                queryParameters['start_date'] = requestParameters.startDate;
            }
            if (requestParameters.endDate !== undefined) {
                queryParameters['end_date'] = requestParameters.endDate;
            }
            const headerParameters = {};
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/v2/accounts/{account_id}/events`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AccountEventsFromJSON)(jsonValue));
        });
    }
    /**
     * Get events for an account. Each event is built on top of a trace which is a series of transactions caused by one inbound message. TonAPI looks for known patterns inside the trace and splits the trace into actions, where a single action represents a meaningful high-level operation like a Jetton Transfer or an NFT Purchase. Actions are expected to be shown to users. It is advised not to build any logic on top of actions because actions can be changed at any time.
     */
    getEventsByAccount(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getEventsByAccountRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get all Jettons balances by owner address
     */
    getJettonsBalancesRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
                throw new runtime.RequiredError('accountId', 'Required parameter requestParameters.accountId was null or undefined when calling getJettonsBalances.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/v2/accounts/{account_id}/jettons`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.JettonsBalancesFromJSON)(jsonValue));
        });
    }
    /**
     * Get all Jettons balances by owner address
     */
    getJettonsBalances(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getJettonsBalancesRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get the transfer jettons history for account_id
     */
    getJettonsHistoryRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
                throw new runtime.RequiredError('accountId', 'Required parameter requestParameters.accountId was null or undefined when calling getJettonsHistory.');
            }
            if (requestParameters.limit === null || requestParameters.limit === undefined) {
                throw new runtime.RequiredError('limit', 'Required parameter requestParameters.limit was null or undefined when calling getJettonsHistory.');
            }
            const queryParameters = {};
            if (requestParameters.beforeLt !== undefined) {
                queryParameters['before_lt'] = requestParameters.beforeLt;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.startDate !== undefined) {
                queryParameters['start_date'] = requestParameters.startDate;
            }
            if (requestParameters.endDate !== undefined) {
                queryParameters['end_date'] = requestParameters.endDate;
            }
            const headerParameters = {};
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/v2/accounts/{account_id}/jettons/history`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AccountEventsFromJSON)(jsonValue));
        });
    }
    /**
     * Get the transfer jettons history for account_id
     */
    getJettonsHistory(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getJettonsHistoryRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get the transfer jetton history for account_id and jetton_id
     */
    getJettonsHistoryByIDRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
                throw new runtime.RequiredError('accountId', 'Required parameter requestParameters.accountId was null or undefined when calling getJettonsHistoryByID.');
            }
            if (requestParameters.jettonId === null || requestParameters.jettonId === undefined) {
                throw new runtime.RequiredError('jettonId', 'Required parameter requestParameters.jettonId was null or undefined when calling getJettonsHistoryByID.');
            }
            if (requestParameters.limit === null || requestParameters.limit === undefined) {
                throw new runtime.RequiredError('limit', 'Required parameter requestParameters.limit was null or undefined when calling getJettonsHistoryByID.');
            }
            const queryParameters = {};
            if (requestParameters.beforeLt !== undefined) {
                queryParameters['before_lt'] = requestParameters.beforeLt;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.startDate !== undefined) {
                queryParameters['start_date'] = requestParameters.startDate;
            }
            if (requestParameters.endDate !== undefined) {
                queryParameters['end_date'] = requestParameters.endDate;
            }
            const headerParameters = {};
            if (requestParameters.acceptLanguage !== undefined && requestParameters.acceptLanguage !== null) {
                headerParameters['Accept-Language'] = String(requestParameters.acceptLanguage);
            }
            const response = yield this.request({
                path: `/v2/accounts/{account_id}/jettons/{jetton_id}/history`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"jetton_id"}}`, encodeURIComponent(String(requestParameters.jettonId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.AccountEventsFromJSON)(jsonValue));
        });
    }
    /**
     * Get the transfer jetton history for account_id and jetton_id
     */
    getJettonsHistoryByID(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getJettonsHistoryByIDRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get all NFT items by owner address
     */
    getNftItemsByOwnerRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
                throw new runtime.RequiredError('accountId', 'Required parameter requestParameters.accountId was null or undefined when calling getNftItemsByOwner.');
            }
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            if (requestParameters.offset !== undefined) {
                queryParameters['offset'] = requestParameters.offset;
            }
            if (requestParameters.indirectOwnership !== undefined) {
                queryParameters['indirect_ownership'] = requestParameters.indirectOwnership;
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/v2/accounts/{account_id}/nfts`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.NftItemsFromJSON)(jsonValue));
        });
    }
    /**
     * Get all NFT items by owner address
     */
    getNftItemsByOwner(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getNftItemsByOwnerRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Search for accounts by name. You can find the account by the first characters of the domain.
     */
    getSearchAccountsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling getSearchAccounts.');
            }
            const queryParameters = {};
            if (requestParameters.name !== undefined) {
                queryParameters['name'] = requestParameters.name;
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/v2/accounts/search`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.FoundAccountsFromJSON)(jsonValue));
        });
    }
    /**
     * Search for accounts by name. You can find the account by the first characters of the domain.
     */
    getSearchAccounts(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getSearchAccountsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get all subscriptions by wallet address
     */
    getSubscriptionsByAccountRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
                throw new runtime.RequiredError('accountId', 'Required parameter requestParameters.accountId was null or undefined when calling getSubscriptionsByAccount.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/v2/accounts/{account_id}/subscriptions`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.SubscriptionsFromJSON)(jsonValue));
        });
    }
    /**
     * Get all subscriptions by wallet address
     */
    getSubscriptionsByAccount(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getSubscriptionsByAccountRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get traces for account
     */
    getTracesByAccountRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
                throw new runtime.RequiredError('accountId', 'Required parameter requestParameters.accountId was null or undefined when calling getTracesByAccount.');
            }
            const queryParameters = {};
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/v2/accounts/{account_id}/traces`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.TraceIdsFromJSON)(jsonValue));
        });
    }
    /**
     * Get traces for account
     */
    getTracesByAccount(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getTracesByAccountRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Update internal cache for a particular account
     */
    reindexAccountRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
                throw new runtime.RequiredError('accountId', 'Required parameter requestParameters.accountId was null or undefined when calling reindexAccount.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/v2/accounts/{account_id}/reindex`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Update internal cache for a particular account
     */
    reindexAccount(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.reindexAccountRaw(requestParameters, initOverrides);
        });
    }
}
exports.AccountsApi = AccountsApi;
