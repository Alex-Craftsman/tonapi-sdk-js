"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * REST api to TON blockchain explorer
 * Provide access to indexed TON blockchain
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@tonkeeper.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LiteServerApi = void 0;
const runtime = require("../runtime");
const index_1 = require("../models/index");
/**
 *
 */
class LiteServerApi extends runtime.BaseAPI {
    /**
     * Get all raw shards info
     */
    getAllRawShardsInfoRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.blockId === null || requestParameters.blockId === undefined) {
                throw new runtime.RequiredError('blockId', 'Required parameter requestParameters.blockId was null or undefined when calling getAllRawShardsInfo.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/v2/liteserver/get_all_shards_info/{block_id}`.replace(`{${"block_id"}}`, encodeURIComponent(String(requestParameters.blockId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.GetAllRawShardsInfo200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Get all raw shards info
     */
    getAllRawShardsInfo(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getAllRawShardsInfoRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get raw account state
     */
    getRawAccountStateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
                throw new runtime.RequiredError('accountId', 'Required parameter requestParameters.accountId was null or undefined when calling getRawAccountState.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/v2/liteserver/get_account_state/{account_id}`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.GetRawAccountState200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Get raw account state
     */
    getRawAccountState(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getRawAccountStateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get raw block proof
     */
    getRawBlockProofRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.knownBlock === null || requestParameters.knownBlock === undefined) {
                throw new runtime.RequiredError('knownBlock', 'Required parameter requestParameters.knownBlock was null or undefined when calling getRawBlockProof.');
            }
            if (requestParameters.mode === null || requestParameters.mode === undefined) {
                throw new runtime.RequiredError('mode', 'Required parameter requestParameters.mode was null or undefined when calling getRawBlockProof.');
            }
            const queryParameters = {};
            if (requestParameters.knownBlock !== undefined) {
                queryParameters['known_block'] = requestParameters.knownBlock;
            }
            if (requestParameters.targetBlock !== undefined) {
                queryParameters['target_block'] = requestParameters.targetBlock;
            }
            if (requestParameters.mode !== undefined) {
                queryParameters['mode'] = requestParameters.mode;
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/v2/liteserver/get_block_proof`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.GetRawBlockProof200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Get raw block proof
     */
    getRawBlockProof(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getRawBlockProofRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get raw blockchain block
     */
    getRawBlockchainBlockRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.blockId === null || requestParameters.blockId === undefined) {
                throw new runtime.RequiredError('blockId', 'Required parameter requestParameters.blockId was null or undefined when calling getRawBlockchainBlock.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/v2/liteserver/get_block/{block_id}`.replace(`{${"block_id"}}`, encodeURIComponent(String(requestParameters.blockId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.GetRawBlockchainBlock200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Get raw blockchain block
     */
    getRawBlockchainBlock(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getRawBlockchainBlockRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get raw blockchain block header
     */
    getRawBlockchainBlockHeaderRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.blockId === null || requestParameters.blockId === undefined) {
                throw new runtime.RequiredError('blockId', 'Required parameter requestParameters.blockId was null or undefined when calling getRawBlockchainBlockHeader.');
            }
            if (requestParameters.mode === null || requestParameters.mode === undefined) {
                throw new runtime.RequiredError('mode', 'Required parameter requestParameters.mode was null or undefined when calling getRawBlockchainBlockHeader.');
            }
            const queryParameters = {};
            if (requestParameters.mode !== undefined) {
                queryParameters['mode'] = requestParameters.mode;
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/v2/liteserver/get_block_header/{block_id}`.replace(`{${"block_id"}}`, encodeURIComponent(String(requestParameters.blockId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.GetRawBlockchainBlockHeader200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Get raw blockchain block header
     */
    getRawBlockchainBlockHeader(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getRawBlockchainBlockHeaderRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get raw blockchain block state
     */
    getRawBlockchainBlockStateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.blockId === null || requestParameters.blockId === undefined) {
                throw new runtime.RequiredError('blockId', 'Required parameter requestParameters.blockId was null or undefined when calling getRawBlockchainBlockState.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/v2/liteserver/get_state/{block_id}`.replace(`{${"block_id"}}`, encodeURIComponent(String(requestParameters.blockId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.GetRawBlockchainBlockState200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Get raw blockchain block state
     */
    getRawBlockchainBlockState(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getRawBlockchainBlockStateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get raw config
     */
    getRawConfigRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.blockId === null || requestParameters.blockId === undefined) {
                throw new runtime.RequiredError('blockId', 'Required parameter requestParameters.blockId was null or undefined when calling getRawConfig.');
            }
            if (requestParameters.mode === null || requestParameters.mode === undefined) {
                throw new runtime.RequiredError('mode', 'Required parameter requestParameters.mode was null or undefined when calling getRawConfig.');
            }
            const queryParameters = {};
            if (requestParameters.mode !== undefined) {
                queryParameters['mode'] = requestParameters.mode;
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/v2/liteserver/get_config_all/{block_id}`.replace(`{${"block_id"}}`, encodeURIComponent(String(requestParameters.blockId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.GetRawConfig200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Get raw config
     */
    getRawConfig(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getRawConfigRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get raw list block transactions
     */
    getRawListBlockTransactionsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.blockId === null || requestParameters.blockId === undefined) {
                throw new runtime.RequiredError('blockId', 'Required parameter requestParameters.blockId was null or undefined when calling getRawListBlockTransactions.');
            }
            if (requestParameters.mode === null || requestParameters.mode === undefined) {
                throw new runtime.RequiredError('mode', 'Required parameter requestParameters.mode was null or undefined when calling getRawListBlockTransactions.');
            }
            if (requestParameters.count === null || requestParameters.count === undefined) {
                throw new runtime.RequiredError('count', 'Required parameter requestParameters.count was null or undefined when calling getRawListBlockTransactions.');
            }
            const queryParameters = {};
            if (requestParameters.mode !== undefined) {
                queryParameters['mode'] = requestParameters.mode;
            }
            if (requestParameters.count !== undefined) {
                queryParameters['count'] = requestParameters.count;
            }
            if (requestParameters.accountId !== undefined) {
                queryParameters['account_id'] = requestParameters.accountId;
            }
            if (requestParameters.lt !== undefined) {
                queryParameters['lt'] = requestParameters.lt;
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/v2/liteserver/list_block_transactions/{block_id}`.replace(`{${"block_id"}}`, encodeURIComponent(String(requestParameters.blockId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.GetRawListBlockTransactions200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Get raw list block transactions
     */
    getRawListBlockTransactions(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getRawListBlockTransactionsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get raw masterchain info
     */
    getRawMasterchainInfoRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/v2/liteserver/get_masterchain_info`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.GetRawMasterchainInfo200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Get raw masterchain info
     */
    getRawMasterchainInfo(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getRawMasterchainInfoRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get raw masterchain info ext
     */
    getRawMasterchainInfoExtRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.mode === null || requestParameters.mode === undefined) {
                throw new runtime.RequiredError('mode', 'Required parameter requestParameters.mode was null or undefined when calling getRawMasterchainInfoExt.');
            }
            const queryParameters = {};
            if (requestParameters.mode !== undefined) {
                queryParameters['mode'] = requestParameters.mode;
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/v2/liteserver/get_masterchain_info_ext`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.GetRawMasterchainInfoExt200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Get raw masterchain info ext
     */
    getRawMasterchainInfoExt(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getRawMasterchainInfoExtRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get raw shard block proof
     */
    getRawShardBlockProofRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.blockId === null || requestParameters.blockId === undefined) {
                throw new runtime.RequiredError('blockId', 'Required parameter requestParameters.blockId was null or undefined when calling getRawShardBlockProof.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/v2/liteserver/get_shard_block_proof/{block_id}`.replace(`{${"block_id"}}`, encodeURIComponent(String(requestParameters.blockId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.GetRawShardBlockProof200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Get raw shard block proof
     */
    getRawShardBlockProof(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getRawShardBlockProofRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get raw shard info
     */
    getRawShardInfoRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.blockId === null || requestParameters.blockId === undefined) {
                throw new runtime.RequiredError('blockId', 'Required parameter requestParameters.blockId was null or undefined when calling getRawShardInfo.');
            }
            if (requestParameters.workchain === null || requestParameters.workchain === undefined) {
                throw new runtime.RequiredError('workchain', 'Required parameter requestParameters.workchain was null or undefined when calling getRawShardInfo.');
            }
            if (requestParameters.shard === null || requestParameters.shard === undefined) {
                throw new runtime.RequiredError('shard', 'Required parameter requestParameters.shard was null or undefined when calling getRawShardInfo.');
            }
            if (requestParameters.exact === null || requestParameters.exact === undefined) {
                throw new runtime.RequiredError('exact', 'Required parameter requestParameters.exact was null or undefined when calling getRawShardInfo.');
            }
            const queryParameters = {};
            if (requestParameters.workchain !== undefined) {
                queryParameters['workchain'] = requestParameters.workchain;
            }
            if (requestParameters.shard !== undefined) {
                queryParameters['shard'] = requestParameters.shard;
            }
            if (requestParameters.exact !== undefined) {
                queryParameters['exact'] = requestParameters.exact;
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/v2/liteserver/get_shard_info/{block_id}`.replace(`{${"block_id"}}`, encodeURIComponent(String(requestParameters.blockId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.GetRawShardInfo200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Get raw shard info
     */
    getRawShardInfo(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getRawShardInfoRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get raw time
     */
    getRawTimeRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/v2/liteserver/get_time`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.GetRawTime200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Get raw time
     */
    getRawTime(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getRawTimeRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get raw transactions
     */
    getRawTransactionsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
                throw new runtime.RequiredError('accountId', 'Required parameter requestParameters.accountId was null or undefined when calling getRawTransactions.');
            }
            if (requestParameters.count === null || requestParameters.count === undefined) {
                throw new runtime.RequiredError('count', 'Required parameter requestParameters.count was null or undefined when calling getRawTransactions.');
            }
            if (requestParameters.lt === null || requestParameters.lt === undefined) {
                throw new runtime.RequiredError('lt', 'Required parameter requestParameters.lt was null or undefined when calling getRawTransactions.');
            }
            if (requestParameters.hash === null || requestParameters.hash === undefined) {
                throw new runtime.RequiredError('hash', 'Required parameter requestParameters.hash was null or undefined when calling getRawTransactions.');
            }
            const queryParameters = {};
            if (requestParameters.count !== undefined) {
                queryParameters['count'] = requestParameters.count;
            }
            if (requestParameters.lt !== undefined) {
                queryParameters['lt'] = requestParameters.lt;
            }
            if (requestParameters.hash !== undefined) {
                queryParameters['hash'] = requestParameters.hash;
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/v2/liteserver/get_transactions/{account_id}`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.GetRawTransactions200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Get raw transactions
     */
    getRawTransactions(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getRawTransactionsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Send raw message to blockchain
     */
    sendRawMessageRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.sendRawMessageRequest === null || requestParameters.sendRawMessageRequest === undefined) {
                throw new runtime.RequiredError('sendRawMessageRequest', 'Required parameter requestParameters.sendRawMessageRequest was null or undefined when calling sendRawMessage.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/v2/liteserver/send_message`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.SendRawMessageRequestToJSON)(requestParameters.sendRawMessageRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SendRawMessage200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Send raw message to blockchain
     */
    sendRawMessage(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.sendRawMessageRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
exports.LiteServerApi = LiteServerApi;
