"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * REST api to TON blockchain explorer
 * Provide access to indexed TON blockchain
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@tonkeeper.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LiteServerApi = void 0;
const runtime = require("../runtime");
const index_1 = require("../models/index");
/**
 *
 */
class LiteServerApi extends runtime.BaseAPI {
    /**
     * Get account state
     */
    getAccountStateLiteServerRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
                throw new runtime.RequiredError('accountId', 'Required parameter requestParameters.accountId was null or undefined when calling getAccountStateLiteServer.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/v2/liteserver/get_account_state/{account_id}`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.GetAccountStateLiteServer200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Get account state
     */
    getAccountStateLiteServer(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getAccountStateLiteServerRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get all shards info
     */
    getAllShardsInfoLiteServerRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.blockId === null || requestParameters.blockId === undefined) {
                throw new runtime.RequiredError('blockId', 'Required parameter requestParameters.blockId was null or undefined when calling getAllShardsInfoLiteServer.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/v2/liteserver/get_all_shards_info/{block_id}`.replace(`{${"block_id"}}`, encodeURIComponent(String(requestParameters.blockId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.GetAllShardsInfoLiteServer200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Get all shards info
     */
    getAllShardsInfoLiteServer(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getAllShardsInfoLiteServerRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get block header
     */
    getBlockHeaderLiteServerRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.blockId === null || requestParameters.blockId === undefined) {
                throw new runtime.RequiredError('blockId', 'Required parameter requestParameters.blockId was null or undefined when calling getBlockHeaderLiteServer.');
            }
            if (requestParameters.mode === null || requestParameters.mode === undefined) {
                throw new runtime.RequiredError('mode', 'Required parameter requestParameters.mode was null or undefined when calling getBlockHeaderLiteServer.');
            }
            const queryParameters = {};
            if (requestParameters.mode !== undefined) {
                queryParameters['mode'] = requestParameters.mode;
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/v2/liteserver/get_block_header/{block_id}`.replace(`{${"block_id"}}`, encodeURIComponent(String(requestParameters.blockId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.GetBlockHeaderLiteServer200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Get block header
     */
    getBlockHeaderLiteServer(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getBlockHeaderLiteServerRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get block
     */
    getBlockLiteServerRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.blockId === null || requestParameters.blockId === undefined) {
                throw new runtime.RequiredError('blockId', 'Required parameter requestParameters.blockId was null or undefined when calling getBlockLiteServer.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/v2/liteserver/get_block/{block_id}`.replace(`{${"block_id"}}`, encodeURIComponent(String(requestParameters.blockId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.GetBlockLiteServer200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Get block
     */
    getBlockLiteServer(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getBlockLiteServerRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get block proof
     */
    getBlockProofLiteServerRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.knownBlock === null || requestParameters.knownBlock === undefined) {
                throw new runtime.RequiredError('knownBlock', 'Required parameter requestParameters.knownBlock was null or undefined when calling getBlockProofLiteServer.');
            }
            if (requestParameters.mode === null || requestParameters.mode === undefined) {
                throw new runtime.RequiredError('mode', 'Required parameter requestParameters.mode was null or undefined when calling getBlockProofLiteServer.');
            }
            const queryParameters = {};
            if (requestParameters.knownBlock !== undefined) {
                queryParameters['known_block'] = requestParameters.knownBlock;
            }
            if (requestParameters.targetBlock !== undefined) {
                queryParameters['target_block'] = requestParameters.targetBlock;
            }
            if (requestParameters.mode !== undefined) {
                queryParameters['mode'] = requestParameters.mode;
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/v2/liteserver/get_block_proof`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.GetBlockProofLiteServer200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Get block proof
     */
    getBlockProofLiteServer(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getBlockProofLiteServerRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get config all
     */
    getConfigAllLiteServerRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.blockId === null || requestParameters.blockId === undefined) {
                throw new runtime.RequiredError('blockId', 'Required parameter requestParameters.blockId was null or undefined when calling getConfigAllLiteServer.');
            }
            if (requestParameters.mode === null || requestParameters.mode === undefined) {
                throw new runtime.RequiredError('mode', 'Required parameter requestParameters.mode was null or undefined when calling getConfigAllLiteServer.');
            }
            const queryParameters = {};
            if (requestParameters.mode !== undefined) {
                queryParameters['mode'] = requestParameters.mode;
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/v2/liteserver/get_config_all/{block_id}`.replace(`{${"block_id"}}`, encodeURIComponent(String(requestParameters.blockId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.GetConfigAllLiteServer200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Get config all
     */
    getConfigAllLiteServer(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getConfigAllLiteServerRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get list block transactions
     */
    getListBlockTransactionsLiteServerRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.blockId === null || requestParameters.blockId === undefined) {
                throw new runtime.RequiredError('blockId', 'Required parameter requestParameters.blockId was null or undefined when calling getListBlockTransactionsLiteServer.');
            }
            if (requestParameters.mode === null || requestParameters.mode === undefined) {
                throw new runtime.RequiredError('mode', 'Required parameter requestParameters.mode was null or undefined when calling getListBlockTransactionsLiteServer.');
            }
            if (requestParameters.count === null || requestParameters.count === undefined) {
                throw new runtime.RequiredError('count', 'Required parameter requestParameters.count was null or undefined when calling getListBlockTransactionsLiteServer.');
            }
            const queryParameters = {};
            if (requestParameters.mode !== undefined) {
                queryParameters['mode'] = requestParameters.mode;
            }
            if (requestParameters.count !== undefined) {
                queryParameters['count'] = requestParameters.count;
            }
            if (requestParameters.accountId !== undefined) {
                queryParameters['account_id'] = requestParameters.accountId;
            }
            if (requestParameters.lt !== undefined) {
                queryParameters['lt'] = requestParameters.lt;
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/v2/liteserver/list_block_transactions/{block_id}`.replace(`{${"block_id"}}`, encodeURIComponent(String(requestParameters.blockId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.GetListBlockTransactionsLiteServer200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Get list block transactions
     */
    getListBlockTransactionsLiteServer(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getListBlockTransactionsLiteServerRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get masterchain info ext
     */
    getMasterchainInfoExtLiteServerRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.mode === null || requestParameters.mode === undefined) {
                throw new runtime.RequiredError('mode', 'Required parameter requestParameters.mode was null or undefined when calling getMasterchainInfoExtLiteServer.');
            }
            const queryParameters = {};
            if (requestParameters.mode !== undefined) {
                queryParameters['mode'] = requestParameters.mode;
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/v2/liteserver/get_masterchain_info_ext`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.GetMasterchainInfoExtLiteServer200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Get masterchain info ext
     */
    getMasterchainInfoExtLiteServer(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getMasterchainInfoExtLiteServerRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get masterchain info
     */
    getMasterchainInfoLiteServerRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/v2/liteserver/get_masterchain_info`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.GetMasterchainInfoLiteServer200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Get masterchain info
     */
    getMasterchainInfoLiteServer(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getMasterchainInfoLiteServerRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get shard block proof
     */
    getShardBlockProofLiteServerRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.blockId === null || requestParameters.blockId === undefined) {
                throw new runtime.RequiredError('blockId', 'Required parameter requestParameters.blockId was null or undefined when calling getShardBlockProofLiteServer.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/v2/liteserver/get_shard_block_proof/{block_id}`.replace(`{${"block_id"}}`, encodeURIComponent(String(requestParameters.blockId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.GetShardBlockProofLiteServer200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Get shard block proof
     */
    getShardBlockProofLiteServer(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getShardBlockProofLiteServerRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get shard info
     */
    getShardInfoLiteServerRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.blockId === null || requestParameters.blockId === undefined) {
                throw new runtime.RequiredError('blockId', 'Required parameter requestParameters.blockId was null or undefined when calling getShardInfoLiteServer.');
            }
            if (requestParameters.workchain === null || requestParameters.workchain === undefined) {
                throw new runtime.RequiredError('workchain', 'Required parameter requestParameters.workchain was null or undefined when calling getShardInfoLiteServer.');
            }
            if (requestParameters.shard === null || requestParameters.shard === undefined) {
                throw new runtime.RequiredError('shard', 'Required parameter requestParameters.shard was null or undefined when calling getShardInfoLiteServer.');
            }
            if (requestParameters.exact === null || requestParameters.exact === undefined) {
                throw new runtime.RequiredError('exact', 'Required parameter requestParameters.exact was null or undefined when calling getShardInfoLiteServer.');
            }
            const queryParameters = {};
            if (requestParameters.workchain !== undefined) {
                queryParameters['workchain'] = requestParameters.workchain;
            }
            if (requestParameters.shard !== undefined) {
                queryParameters['shard'] = requestParameters.shard;
            }
            if (requestParameters.exact !== undefined) {
                queryParameters['exact'] = requestParameters.exact;
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/v2/liteserver/get_shard_info/{block_id}`.replace(`{${"block_id"}}`, encodeURIComponent(String(requestParameters.blockId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.GetShardInfoLiteServer200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Get shard info
     */
    getShardInfoLiteServer(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getShardInfoLiteServerRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get block state
     */
    getStateLiteServerRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.blockId === null || requestParameters.blockId === undefined) {
                throw new runtime.RequiredError('blockId', 'Required parameter requestParameters.blockId was null or undefined when calling getStateLiteServer.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/v2/liteserver/get_state/{block_id}`.replace(`{${"block_id"}}`, encodeURIComponent(String(requestParameters.blockId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.GetStateLiteServer200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Get block state
     */
    getStateLiteServer(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getStateLiteServerRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get time
     */
    getTimeLiteServerRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/v2/liteserver/get_time`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.GetTimeLiteServer200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Get time
     */
    getTimeLiteServer(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getTimeLiteServerRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get transactions
     */
    getTransactionsLiteServerRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
                throw new runtime.RequiredError('accountId', 'Required parameter requestParameters.accountId was null or undefined when calling getTransactionsLiteServer.');
            }
            if (requestParameters.count === null || requestParameters.count === undefined) {
                throw new runtime.RequiredError('count', 'Required parameter requestParameters.count was null or undefined when calling getTransactionsLiteServer.');
            }
            if (requestParameters.lt === null || requestParameters.lt === undefined) {
                throw new runtime.RequiredError('lt', 'Required parameter requestParameters.lt was null or undefined when calling getTransactionsLiteServer.');
            }
            if (requestParameters.hash === null || requestParameters.hash === undefined) {
                throw new runtime.RequiredError('hash', 'Required parameter requestParameters.hash was null or undefined when calling getTransactionsLiteServer.');
            }
            const queryParameters = {};
            if (requestParameters.count !== undefined) {
                queryParameters['count'] = requestParameters.count;
            }
            if (requestParameters.lt !== undefined) {
                queryParameters['lt'] = requestParameters.lt;
            }
            if (requestParameters.hash !== undefined) {
                queryParameters['hash'] = requestParameters.hash;
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/v2/liteserver/get_transactions/{account_id}`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.GetTransactionsLiteServer200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Get transactions
     */
    getTransactionsLiteServer(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getTransactionsLiteServerRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Send message
     */
    sendMessageLiteServerRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.sendMessageLiteServerRequest === null || requestParameters.sendMessageLiteServerRequest === undefined) {
                throw new runtime.RequiredError('sendMessageLiteServerRequest', 'Required parameter requestParameters.sendMessageLiteServerRequest was null or undefined when calling sendMessageLiteServer.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/v2/liteserver/send_message`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.SendMessageLiteServerRequestToJSON)(requestParameters.sendMessageLiteServerRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SendMessageLiteServer200ResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Send message
     */
    sendMessageLiteServer(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.sendMessageLiteServerRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
exports.LiteServerApi = LiteServerApi;
