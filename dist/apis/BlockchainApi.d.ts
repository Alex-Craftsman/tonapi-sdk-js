/**
 * REST api to TON blockchain explorer
 * Provide access to indexed TON blockchain
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@tonkeeper.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { Block, Config, MethodExecutionResult, RawAccount, SendMessageRequest, Transaction, Transactions, Validators } from '../models/index';
export interface ExecGetMethodRequest {
    accountId: string;
    methodName: string;
    args?: Array<string>;
}
export interface GetAccountTransactionsRequest {
    accountId: string;
    afterLt?: number;
    beforeLt?: number;
    limit?: number;
}
export interface GetBlockRequest {
    blockId: string;
}
export interface GetBlockTransactionsRequest {
    blockId: string;
}
export interface GetRawAccountRequest {
    accountId: string;
}
export interface GetTransactionRequest {
    transactionId: string;
}
export interface SendMessageOperationRequest {
    sendMessageRequest: SendMessageRequest;
}
/**
 * BlockchainApi - interface
 *
 * @export
 * @interface BlockchainApiInterface
 */
export interface BlockchainApiInterface {
    /**
     * Execute get method for account
     * @param {string} accountId account ID
     * @param {string} methodName contract get method name
     * @param {Array<string>} [args]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlockchainApiInterface
     */
    execGetMethodRaw(requestParameters: ExecGetMethodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MethodExecutionResult>>;
    /**
     * Execute get method for account
     */
    execGetMethod(requestParameters: ExecGetMethodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MethodExecutionResult>;
    /**
     * Get account transactions
     * @param {string} accountId account ID
     * @param {number} [afterLt] omit this parameter to get last transactions
     * @param {number} [beforeLt] omit this parameter to get last transactions
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlockchainApiInterface
     */
    getAccountTransactionsRaw(requestParameters: GetAccountTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Transactions>>;
    /**
     * Get account transactions
     */
    getAccountTransactions(requestParameters: GetAccountTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Transactions>;
    /**
     * Get block data
     * @param {string} blockId block ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlockchainApiInterface
     */
    getBlockRaw(requestParameters: GetBlockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Block>>;
    /**
     * Get block data
     */
    getBlock(requestParameters: GetBlockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Block>;
    /**
     * Get transactions from block
     * @param {string} blockId block ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlockchainApiInterface
     */
    getBlockTransactionsRaw(requestParameters: GetBlockTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Transactions>>;
    /**
     * Get transactions from block
     */
    getBlockTransactions(requestParameters: GetBlockTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Transactions>;
    /**
     * Get blockchain config
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlockchainApiInterface
     */
    getConfigRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Config>>;
    /**
     * Get blockchain config
     */
    getConfig(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Config>;
    /**
     * Get last known masterchain block
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlockchainApiInterface
     */
    getMasterchainHeadRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Block>>;
    /**
     * Get last known masterchain block
     */
    getMasterchainHead(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Block>;
    /**
     * Get low-level information about an account taken directly from the blockchain.
     * @param {string} accountId account ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlockchainApiInterface
     */
    getRawAccountRaw(requestParameters: GetRawAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RawAccount>>;
    /**
     * Get low-level information about an account taken directly from the blockchain.
     */
    getRawAccount(requestParameters: GetRawAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RawAccount>;
    /**
     * Get transaction data
     * @param {string} transactionId transaction ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlockchainApiInterface
     */
    getTransactionRaw(requestParameters: GetTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Transaction>>;
    /**
     * Get transaction data
     */
    getTransaction(requestParameters: GetTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Transaction>;
    /**
     * Get validators
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlockchainApiInterface
     */
    getValidatorsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Validators>>;
    /**
     * Get validators
     */
    getValidators(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Validators>;
    /**
     * Send message to blockchain
     * @param {SendMessageRequest} sendMessageRequest bag-of-cells serialized to base64
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BlockchainApiInterface
     */
    sendMessageRaw(requestParameters: SendMessageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Send message to blockchain
     */
    sendMessage(requestParameters: SendMessageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
}
/**
 *
 */
export declare class BlockchainApi extends runtime.BaseAPI implements BlockchainApiInterface {
    /**
     * Execute get method for account
     */
    execGetMethodRaw(requestParameters: ExecGetMethodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MethodExecutionResult>>;
    /**
     * Execute get method for account
     */
    execGetMethod(requestParameters: ExecGetMethodRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MethodExecutionResult>;
    /**
     * Get account transactions
     */
    getAccountTransactionsRaw(requestParameters: GetAccountTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Transactions>>;
    /**
     * Get account transactions
     */
    getAccountTransactions(requestParameters: GetAccountTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Transactions>;
    /**
     * Get block data
     */
    getBlockRaw(requestParameters: GetBlockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Block>>;
    /**
     * Get block data
     */
    getBlock(requestParameters: GetBlockRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Block>;
    /**
     * Get transactions from block
     */
    getBlockTransactionsRaw(requestParameters: GetBlockTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Transactions>>;
    /**
     * Get transactions from block
     */
    getBlockTransactions(requestParameters: GetBlockTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Transactions>;
    /**
     * Get blockchain config
     */
    getConfigRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Config>>;
    /**
     * Get blockchain config
     */
    getConfig(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Config>;
    /**
     * Get last known masterchain block
     */
    getMasterchainHeadRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Block>>;
    /**
     * Get last known masterchain block
     */
    getMasterchainHead(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Block>;
    /**
     * Get low-level information about an account taken directly from the blockchain.
     */
    getRawAccountRaw(requestParameters: GetRawAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RawAccount>>;
    /**
     * Get low-level information about an account taken directly from the blockchain.
     */
    getRawAccount(requestParameters: GetRawAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RawAccount>;
    /**
     * Get transaction data
     */
    getTransactionRaw(requestParameters: GetTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Transaction>>;
    /**
     * Get transaction data
     */
    getTransaction(requestParameters: GetTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Transaction>;
    /**
     * Get validators
     */
    getValidatorsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Validators>>;
    /**
     * Get validators
     */
    getValidators(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Validators>;
    /**
     * Send message to blockchain
     */
    sendMessageRaw(requestParameters: SendMessageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Send message to blockchain
     */
    sendMessage(requestParameters: SendMessageOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
}
