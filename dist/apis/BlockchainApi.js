"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * REST api to TON blockchain explorer
 * Provide access to indexed TON blockchain
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@tonkeeper.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BlockchainApi = void 0;
const runtime = require("../runtime");
const index_1 = require("../models/index");
/**
 *
 */
class BlockchainApi extends runtime.BaseAPI {
    /**
     * Execute get method for account
     */
    execGetMethodRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
                throw new runtime.RequiredError('accountId', 'Required parameter requestParameters.accountId was null or undefined when calling execGetMethod.');
            }
            if (requestParameters.methodName === null || requestParameters.methodName === undefined) {
                throw new runtime.RequiredError('methodName', 'Required parameter requestParameters.methodName was null or undefined when calling execGetMethod.');
            }
            const queryParameters = {};
            if (requestParameters.args) {
                queryParameters['args'] = requestParameters.args;
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/v2/blockchain/accounts/{account_id}/methods/{method_name}`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))).replace(`{${"method_name"}}`, encodeURIComponent(String(requestParameters.methodName))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.MethodExecutionResultFromJSON)(jsonValue));
        });
    }
    /**
     * Execute get method for account
     */
    execGetMethod(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.execGetMethodRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get account transactions
     */
    getAccountTransactionsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
                throw new runtime.RequiredError('accountId', 'Required parameter requestParameters.accountId was null or undefined when calling getAccountTransactions.');
            }
            const queryParameters = {};
            if (requestParameters.afterLt !== undefined) {
                queryParameters['after_lt'] = requestParameters.afterLt;
            }
            if (requestParameters.beforeLt !== undefined) {
                queryParameters['before_lt'] = requestParameters.beforeLt;
            }
            if (requestParameters.limit !== undefined) {
                queryParameters['limit'] = requestParameters.limit;
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/v2/blockchain/accounts/{account_id}/transactions`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.TransactionsFromJSON)(jsonValue));
        });
    }
    /**
     * Get account transactions
     */
    getAccountTransactions(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getAccountTransactionsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get block data
     */
    getBlockRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.blockId === null || requestParameters.blockId === undefined) {
                throw new runtime.RequiredError('blockId', 'Required parameter requestParameters.blockId was null or undefined when calling getBlock.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/v2/blockchain/blocks/{block_id}`.replace(`{${"block_id"}}`, encodeURIComponent(String(requestParameters.blockId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.BlockFromJSON)(jsonValue));
        });
    }
    /**
     * Get block data
     */
    getBlock(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getBlockRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get transactions from block
     */
    getBlockTransactionsRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.blockId === null || requestParameters.blockId === undefined) {
                throw new runtime.RequiredError('blockId', 'Required parameter requestParameters.blockId was null or undefined when calling getBlockTransactions.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/v2/blockchain/blocks/{block_id}/transactions`.replace(`{${"block_id"}}`, encodeURIComponent(String(requestParameters.blockId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.TransactionsFromJSON)(jsonValue));
        });
    }
    /**
     * Get transactions from block
     */
    getBlockTransactions(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getBlockTransactionsRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get blockchain config
     */
    getConfigRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/v2/blockchain/config`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ConfigFromJSON)(jsonValue));
        });
    }
    /**
     * Get blockchain config
     */
    getConfig(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getConfigRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get last known masterchain block
     */
    getMasterchainHeadRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/v2/blockchain/masterchain-head`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.BlockFromJSON)(jsonValue));
        });
    }
    /**
     * Get last known masterchain block
     */
    getMasterchainHead(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getMasterchainHeadRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get low-level information about an account taken directly from the blockchain.
     */
    getRawAccountRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.accountId === null || requestParameters.accountId === undefined) {
                throw new runtime.RequiredError('accountId', 'Required parameter requestParameters.accountId was null or undefined when calling getRawAccount.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/v2/blockchain/accounts/{account_id}`.replace(`{${"account_id"}}`, encodeURIComponent(String(requestParameters.accountId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.RawAccountFromJSON)(jsonValue));
        });
    }
    /**
     * Get low-level information about an account taken directly from the blockchain.
     */
    getRawAccount(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getRawAccountRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get transaction data
     */
    getTransactionRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.transactionId === null || requestParameters.transactionId === undefined) {
                throw new runtime.RequiredError('transactionId', 'Required parameter requestParameters.transactionId was null or undefined when calling getTransaction.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/v2/blockchain/transactions/{transaction_id}`.replace(`{${"transaction_id"}}`, encodeURIComponent(String(requestParameters.transactionId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.TransactionFromJSON)(jsonValue));
        });
    }
    /**
     * Get transaction data
     */
    getTransaction(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getTransactionRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get validators
     */
    getValidatorsRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/v2/blockchain/validators`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ValidatorsFromJSON)(jsonValue));
        });
    }
    /**
     * Get validators
     */
    getValidators(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getValidatorsRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Send message to blockchain
     */
    sendMessageRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.sendMessageRequest === null || requestParameters.sendMessageRequest === undefined) {
                throw new runtime.RequiredError('sendMessageRequest', 'Required parameter requestParameters.sendMessageRequest was null or undefined when calling sendMessage.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/v2/blockchain/message`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.SendMessageRequestToJSON)(requestParameters.sendMessageRequest),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Send message to blockchain
     */
    sendMessage(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.sendMessageRaw(requestParameters, initOverrides);
        });
    }
}
exports.BlockchainApi = BlockchainApi;
