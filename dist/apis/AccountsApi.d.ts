/**
 * REST api to TON blockchain explorer
 * Provide access to indexed TON blockchain
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@tonkeeper.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { Account, AccountEvent, AccountEvents, Accounts, DnsExpiring, DomainNames, FoundAccounts, GetAccountDiff200Response, GetAccountPublicKey200Response, GetAccountsRequest, JettonsBalances, NftItems, Subscriptions, TraceIDs } from '../models/index';
export interface AccountDnsBackResolveRequest {
    accountId: string;
}
export interface GetAccountRequest {
    accountId: string;
}
export interface GetAccountDiffRequest {
    accountId: string;
    startDate: number;
    endDate: number;
}
export interface GetAccountDnsExpiringRequest {
    accountId: string;
    period?: number;
}
export interface GetAccountEventRequest {
    accountId: string;
    eventId: string;
    acceptLanguage?: string;
    subjectOnly?: boolean;
}
export interface GetAccountEventsRequest {
    accountId: string;
    limit: number;
    acceptLanguage?: string;
    subjectOnly?: boolean;
    beforeLt?: number;
    startDate?: number;
    endDate?: number;
}
export interface GetAccountJettonHistoryByIDRequest {
    accountId: string;
    jettonId: string;
    limit: number;
    acceptLanguage?: string;
    beforeLt?: number;
    startDate?: number;
    endDate?: number;
}
export interface GetAccountJettonsBalancesRequest {
    accountId: string;
}
export interface GetAccountJettonsHistoryRequest {
    accountId: string;
    limit: number;
    acceptLanguage?: string;
    beforeLt?: number;
    startDate?: number;
    endDate?: number;
}
export interface GetAccountNftItemsRequest {
    accountId: string;
    collection?: string;
    limit?: number;
    offset?: number;
    indirectOwnership?: boolean;
}
export interface GetAccountPublicKeyRequest {
    accountId: string;
}
export interface GetAccountSubscriptionsRequest {
    accountId: string;
}
export interface GetAccountTracesRequest {
    accountId: string;
    limit?: number;
}
export interface GetAccountsOperationRequest {
    getAccountsRequest?: GetAccountsRequest;
}
export interface ReindexAccountRequest {
    accountId: string;
}
export interface SearchAccountsRequest {
    name: string;
}
/**
 * AccountsApi - interface
 *
 * @export
 * @interface AccountsApiInterface
 */
export interface AccountsApiInterface {
    /**
     * Get account\'s domains
     * @param {string} accountId account ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    accountDnsBackResolveRaw(requestParameters: AccountDnsBackResolveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DomainNames>>;
    /**
     * Get account\'s domains
     */
    accountDnsBackResolve(requestParameters: AccountDnsBackResolveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainNames>;
    /**
     * Get human-friendly information about an account without low-level details.
     * @param {string} accountId account ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    getAccountRaw(requestParameters: GetAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Account>>;
    /**
     * Get human-friendly information about an account without low-level details.
     */
    getAccount(requestParameters: GetAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Account>;
    /**
     * Get account\'s balance change
     * @param {string} accountId account ID
     * @param {number} startDate
     * @param {number} endDate
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    getAccountDiffRaw(requestParameters: GetAccountDiffRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAccountDiff200Response>>;
    /**
     * Get account\'s balance change
     */
    getAccountDiff(requestParameters: GetAccountDiffRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAccountDiff200Response>;
    /**
     * Get expiring account .ton dns
     * @param {string} accountId account ID
     * @param {number} [period] number of days before expiration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    getAccountDnsExpiringRaw(requestParameters: GetAccountDnsExpiringRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DnsExpiring>>;
    /**
     * Get expiring account .ton dns
     */
    getAccountDnsExpiring(requestParameters: GetAccountDnsExpiringRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DnsExpiring>;
    /**
     * Get event for an account by event_id
     * @param {string} accountId account ID
     * @param {string} eventId event ID or transaction hash in hex (without 0x) or base64url format
     * @param {string} [acceptLanguage]
     * @param {boolean} [subjectOnly] filter actions where requested account is not real subject (for example sender or receiver jettons)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    getAccountEventRaw(requestParameters: GetAccountEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccountEvent>>;
    /**
     * Get event for an account by event_id
     */
    getAccountEvent(requestParameters: GetAccountEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccountEvent>;
    /**
     * Get events for an account. Each event is built on top of a trace which is a series of transactions caused by one inbound message. TonAPI looks for known patterns inside the trace and splits the trace into actions, where a single action represents a meaningful high-level operation like a Jetton Transfer or an NFT Purchase. Actions are expected to be shown to users. It is advised not to build any logic on top of actions because actions can be changed at any time.
     * @param {string} accountId account ID
     * @param {number} limit
     * @param {string} [acceptLanguage]
     * @param {boolean} [subjectOnly] filter actions where requested account is not real subject (for example sender or receiver jettons)
     * @param {number} [beforeLt] omit this parameter to get last events
     * @param {number} [startDate]
     * @param {number} [endDate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    getAccountEventsRaw(requestParameters: GetAccountEventsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccountEvents>>;
    /**
     * Get events for an account. Each event is built on top of a trace which is a series of transactions caused by one inbound message. TonAPI looks for known patterns inside the trace and splits the trace into actions, where a single action represents a meaningful high-level operation like a Jetton Transfer or an NFT Purchase. Actions are expected to be shown to users. It is advised not to build any logic on top of actions because actions can be changed at any time.
     */
    getAccountEvents(requestParameters: GetAccountEventsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccountEvents>;
    /**
     * Get the transfer jetton history for account and jetton
     * @param {string} accountId account ID
     * @param {string} jettonId jetton ID
     * @param {number} limit
     * @param {string} [acceptLanguage]
     * @param {number} [beforeLt] omit this parameter to get last events
     * @param {number} [startDate]
     * @param {number} [endDate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    getAccountJettonHistoryByIDRaw(requestParameters: GetAccountJettonHistoryByIDRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccountEvents>>;
    /**
     * Get the transfer jetton history for account and jetton
     */
    getAccountJettonHistoryByID(requestParameters: GetAccountJettonHistoryByIDRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccountEvents>;
    /**
     * Get all Jettons balances by owner address
     * @param {string} accountId account ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    getAccountJettonsBalancesRaw(requestParameters: GetAccountJettonsBalancesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JettonsBalances>>;
    /**
     * Get all Jettons balances by owner address
     */
    getAccountJettonsBalances(requestParameters: GetAccountJettonsBalancesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JettonsBalances>;
    /**
     * Get the transfer jettons history for account
     * @param {string} accountId account ID
     * @param {number} limit
     * @param {string} [acceptLanguage]
     * @param {number} [beforeLt] omit this parameter to get last events
     * @param {number} [startDate]
     * @param {number} [endDate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    getAccountJettonsHistoryRaw(requestParameters: GetAccountJettonsHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccountEvents>>;
    /**
     * Get the transfer jettons history for account
     */
    getAccountJettonsHistory(requestParameters: GetAccountJettonsHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccountEvents>;
    /**
     * Get all NFT items by owner address
     * @param {string} accountId account ID
     * @param {string} [collection] nft collection
     * @param {number} [limit]
     * @param {number} [offset]
     * @param {boolean} [indirectOwnership] Selling nft items in ton implemented usually via transfer items to special selling account. This option enables including items which owned not directly.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    getAccountNftItemsRaw(requestParameters: GetAccountNftItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NftItems>>;
    /**
     * Get all NFT items by owner address
     */
    getAccountNftItems(requestParameters: GetAccountNftItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NftItems>;
    /**
     * Get public key by account id
     * @param {string} accountId account ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    getAccountPublicKeyRaw(requestParameters: GetAccountPublicKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAccountPublicKey200Response>>;
    /**
     * Get public key by account id
     */
    getAccountPublicKey(requestParameters: GetAccountPublicKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAccountPublicKey200Response>;
    /**
     * Get all subscriptions by wallet address
     * @param {string} accountId account ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    getAccountSubscriptionsRaw(requestParameters: GetAccountSubscriptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Subscriptions>>;
    /**
     * Get all subscriptions by wallet address
     */
    getAccountSubscriptions(requestParameters: GetAccountSubscriptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Subscriptions>;
    /**
     * Get traces for account
     * @param {string} accountId account ID
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    getAccountTracesRaw(requestParameters: GetAccountTracesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TraceIDs>>;
    /**
     * Get traces for account
     */
    getAccountTraces(requestParameters: GetAccountTracesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TraceIDs>;
    /**
     * Get human-friendly information about several accounts without low-level details.
     * @param {GetAccountsRequest} [getAccountsRequest] a list of account ids
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    getAccountsRaw(requestParameters: GetAccountsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Accounts>>;
    /**
     * Get human-friendly information about several accounts without low-level details.
     */
    getAccounts(requestParameters: GetAccountsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Accounts>;
    /**
     * Update internal cache for a particular account
     * @param {string} accountId account ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    reindexAccountRaw(requestParameters: ReindexAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Update internal cache for a particular account
     */
    reindexAccount(requestParameters: ReindexAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     * Search by account domain name
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountsApiInterface
     */
    searchAccountsRaw(requestParameters: SearchAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FoundAccounts>>;
    /**
     * Search by account domain name
     */
    searchAccounts(requestParameters: SearchAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FoundAccounts>;
}
/**
 *
 */
export declare class AccountsApi extends runtime.BaseAPI implements AccountsApiInterface {
    /**
     * Get account\'s domains
     */
    accountDnsBackResolveRaw(requestParameters: AccountDnsBackResolveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DomainNames>>;
    /**
     * Get account\'s domains
     */
    accountDnsBackResolve(requestParameters: AccountDnsBackResolveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainNames>;
    /**
     * Get human-friendly information about an account without low-level details.
     */
    getAccountRaw(requestParameters: GetAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Account>>;
    /**
     * Get human-friendly information about an account without low-level details.
     */
    getAccount(requestParameters: GetAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Account>;
    /**
     * Get account\'s balance change
     */
    getAccountDiffRaw(requestParameters: GetAccountDiffRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAccountDiff200Response>>;
    /**
     * Get account\'s balance change
     */
    getAccountDiff(requestParameters: GetAccountDiffRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAccountDiff200Response>;
    /**
     * Get expiring account .ton dns
     */
    getAccountDnsExpiringRaw(requestParameters: GetAccountDnsExpiringRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DnsExpiring>>;
    /**
     * Get expiring account .ton dns
     */
    getAccountDnsExpiring(requestParameters: GetAccountDnsExpiringRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DnsExpiring>;
    /**
     * Get event for an account by event_id
     */
    getAccountEventRaw(requestParameters: GetAccountEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccountEvent>>;
    /**
     * Get event for an account by event_id
     */
    getAccountEvent(requestParameters: GetAccountEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccountEvent>;
    /**
     * Get events for an account. Each event is built on top of a trace which is a series of transactions caused by one inbound message. TonAPI looks for known patterns inside the trace and splits the trace into actions, where a single action represents a meaningful high-level operation like a Jetton Transfer or an NFT Purchase. Actions are expected to be shown to users. It is advised not to build any logic on top of actions because actions can be changed at any time.
     */
    getAccountEventsRaw(requestParameters: GetAccountEventsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccountEvents>>;
    /**
     * Get events for an account. Each event is built on top of a trace which is a series of transactions caused by one inbound message. TonAPI looks for known patterns inside the trace and splits the trace into actions, where a single action represents a meaningful high-level operation like a Jetton Transfer or an NFT Purchase. Actions are expected to be shown to users. It is advised not to build any logic on top of actions because actions can be changed at any time.
     */
    getAccountEvents(requestParameters: GetAccountEventsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccountEvents>;
    /**
     * Get the transfer jetton history for account and jetton
     */
    getAccountJettonHistoryByIDRaw(requestParameters: GetAccountJettonHistoryByIDRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccountEvents>>;
    /**
     * Get the transfer jetton history for account and jetton
     */
    getAccountJettonHistoryByID(requestParameters: GetAccountJettonHistoryByIDRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccountEvents>;
    /**
     * Get all Jettons balances by owner address
     */
    getAccountJettonsBalancesRaw(requestParameters: GetAccountJettonsBalancesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JettonsBalances>>;
    /**
     * Get all Jettons balances by owner address
     */
    getAccountJettonsBalances(requestParameters: GetAccountJettonsBalancesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JettonsBalances>;
    /**
     * Get the transfer jettons history for account
     */
    getAccountJettonsHistoryRaw(requestParameters: GetAccountJettonsHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccountEvents>>;
    /**
     * Get the transfer jettons history for account
     */
    getAccountJettonsHistory(requestParameters: GetAccountJettonsHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccountEvents>;
    /**
     * Get all NFT items by owner address
     */
    getAccountNftItemsRaw(requestParameters: GetAccountNftItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NftItems>>;
    /**
     * Get all NFT items by owner address
     */
    getAccountNftItems(requestParameters: GetAccountNftItemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NftItems>;
    /**
     * Get public key by account id
     */
    getAccountPublicKeyRaw(requestParameters: GetAccountPublicKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetAccountPublicKey200Response>>;
    /**
     * Get public key by account id
     */
    getAccountPublicKey(requestParameters: GetAccountPublicKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetAccountPublicKey200Response>;
    /**
     * Get all subscriptions by wallet address
     */
    getAccountSubscriptionsRaw(requestParameters: GetAccountSubscriptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Subscriptions>>;
    /**
     * Get all subscriptions by wallet address
     */
    getAccountSubscriptions(requestParameters: GetAccountSubscriptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Subscriptions>;
    /**
     * Get traces for account
     */
    getAccountTracesRaw(requestParameters: GetAccountTracesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TraceIDs>>;
    /**
     * Get traces for account
     */
    getAccountTraces(requestParameters: GetAccountTracesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TraceIDs>;
    /**
     * Get human-friendly information about several accounts without low-level details.
     */
    getAccountsRaw(requestParameters: GetAccountsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Accounts>>;
    /**
     * Get human-friendly information about several accounts without low-level details.
     */
    getAccounts(requestParameters?: GetAccountsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Accounts>;
    /**
     * Update internal cache for a particular account
     */
    reindexAccountRaw(requestParameters: ReindexAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Update internal cache for a particular account
     */
    reindexAccount(requestParameters: ReindexAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     * Search by account domain name
     */
    searchAccountsRaw(requestParameters: SearchAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FoundAccounts>>;
    /**
     * Search by account domain name
     */
    searchAccounts(requestParameters: SearchAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FoundAccounts>;
}
