"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * REST api to TON blockchain explorer
 * Provide access to indexed TON blockchain
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@fslabs.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WalletApi = void 0;
const runtime = require("../runtime");
const models_1 = require("../models");
/**
 *
 */
class WalletApi extends runtime.BaseAPI {
    /**
     * Find all wallets by public key
     */
    findWalletsByPubKeyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.publicKey === null || requestParameters.publicKey === undefined) {
                throw new runtime.RequiredError('publicKey', 'Required parameter requestParameters.publicKey was null or undefined when calling findWalletsByPubKey.');
            }
            const queryParameters = {};
            if (requestParameters.publicKey !== undefined) {
                queryParameters['public_key'] = requestParameters.publicKey;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("JWTAuth", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/wallet/findByPubkey`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.WalletsFromJSON)(jsonValue));
        });
    }
    /**
     * Find all wallets by public key
     */
    findWalletsByPubKey(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.findWalletsByPubKeyRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get public key by wallet address
     */
    getWalletPublicKeyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.account === null || requestParameters.account === undefined) {
                throw new runtime.RequiredError('account', 'Required parameter requestParameters.account was null or undefined when calling getWalletPublicKey.');
            }
            const queryParameters = {};
            if (requestParameters.account !== undefined) {
                queryParameters['account'] = requestParameters.account;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("JWTAuth", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/wallet/getWalletPublicKey`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.PublicKeyFromJSON)(jsonValue));
        });
    }
    /**
     * Get public key by wallet address
     */
    getWalletPublicKey(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getWalletPublicKeyRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get last seqno for wallet
     */
    getWalletSeqnoRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.account === null || requestParameters.account === undefined) {
                throw new runtime.RequiredError('account', 'Required parameter requestParameters.account was null or undefined when calling getWalletSeqno.');
            }
            const queryParameters = {};
            if (requestParameters.account !== undefined) {
                queryParameters['account'] = requestParameters.account;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("JWTAuth", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/wallet/getSeqno`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.SeqnoFromJSON)(jsonValue));
        });
    }
    /**
     * Get last seqno for wallet
     */
    getWalletSeqno(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getWalletSeqnoRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
exports.WalletApi = WalletApi;
