/* tslint:disable */
/* eslint-disable */
/**
 * REST api to TON blockchain explorer
 * Provide access to indexed TON blockchain
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@fslabs.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AccountAddress } from './AccountAddress';
import {
    AccountAddressFromJSON,
    AccountAddressFromJSONTyped,
    AccountAddressToJSON,
} from './AccountAddress';
import type { ValueFlowNftsInner } from './ValueFlowNftsInner';
import {
    ValueFlowNftsInnerFromJSON,
    ValueFlowNftsInnerFromJSONTyped,
    ValueFlowNftsInnerToJSON,
} from './ValueFlowNftsInner';

/**
 * 
 * @export
 * @interface ValueFlow
 */
export interface ValueFlow {
    /**
     * 
     * @type {AccountAddress}
     * @memberof ValueFlow
     */
    account: AccountAddress;
    /**
     * 
     * @type {number}
     * @memberof ValueFlow
     */
    ton: number;
    /**
     * 
     * @type {number}
     * @memberof ValueFlow
     */
    fees: number;
    /**
     * 
     * @type {Array<ValueFlowNftsInner>}
     * @memberof ValueFlow
     */
    nfts?: Array<ValueFlowNftsInner>;
    /**
     * 
     * @type {Array<ValueFlowNftsInner>}
     * @memberof ValueFlow
     */
    jettons?: Array<ValueFlowNftsInner>;
}

/**
 * Check if a given object implements the ValueFlow interface.
 */
export function instanceOfValueFlow(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "account" in value;
    isInstance = isInstance && "ton" in value;
    isInstance = isInstance && "fees" in value;

    return isInstance;
}

export function ValueFlowFromJSON(json: any): ValueFlow {
    return ValueFlowFromJSONTyped(json, false);
}

export function ValueFlowFromJSONTyped(json: any, ignoreDiscriminator: boolean): ValueFlow {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'account': AccountAddressFromJSON(json['account']),
        'ton': json['ton'],
        'fees': json['fees'],
        'nfts': !exists(json, 'nfts') ? undefined : ((json['nfts'] as Array<any>).map(ValueFlowNftsInnerFromJSON)),
        'jettons': !exists(json, 'jettons') ? undefined : ((json['jettons'] as Array<any>).map(ValueFlowNftsInnerFromJSON)),
    };
}

export function ValueFlowToJSON(value?: ValueFlow | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'account': AccountAddressToJSON(value.account),
        'ton': value.ton,
        'fees': value.fees,
        'nfts': value.nfts === undefined ? undefined : ((value.nfts as Array<any>).map(ValueFlowNftsInnerToJSON)),
        'jettons': value.jettons === undefined ? undefined : ((value.jettons as Array<any>).map(ValueFlowNftsInnerToJSON)),
    };
}

