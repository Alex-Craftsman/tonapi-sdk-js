/* tslint:disable */
/* eslint-disable */
/**
 * REST api to TON blockchain explorer
 * Provide access to indexed TON blockchain
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@fslabs.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    JettonTransferAction,
    JettonTransferActionFromJSON,
    JettonTransferActionFromJSONTyped,
    JettonTransferActionToJSON,
} from './JettonTransferAction';
import {
    TonTransferAction,
    TonTransferActionFromJSON,
    TonTransferActionFromJSONTyped,
    TonTransferActionToJSON,
} from './TonTransferAction';

/**
 * 
 * @export
 * @interface Action
 */
export interface Action {
    /**
     * 
     * @type {JettonTransferAction}
     * @memberof Action
     */
    jettonTransfer?: JettonTransferAction;
    /**
     * 
     * @type {TonTransferAction}
     * @memberof Action
     */
    tonTransfer?: TonTransferAction;
    /**
     * 
     * @type {string}
     * @memberof Action
     */
    status: ActionStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof Action
     */
    type: ActionTypeEnum;
}


/**
 * @export
 */
export const ActionStatusEnum = {
    Ok: 'ok',
    Failed: 'failed',
    Pending: 'pending'
} as const;
export type ActionStatusEnum = typeof ActionStatusEnum[keyof typeof ActionStatusEnum];

/**
 * @export
 */
export const ActionTypeEnum = {
    TonTransfer: 'TonTransfer',
    JettonTransfer: 'JettonTransfer',
    NftTransfer: 'NftTransfer'
} as const;
export type ActionTypeEnum = typeof ActionTypeEnum[keyof typeof ActionTypeEnum];


/**
 * Check if a given object implements the Action interface.
 */
export function instanceOfAction(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "status" in value;
    isInstance = isInstance && "type" in value;

    return isInstance;
}

export function ActionFromJSON(json: any): Action {
    return ActionFromJSONTyped(json, false);
}

export function ActionFromJSONTyped(json: any, ignoreDiscriminator: boolean): Action {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'jettonTransfer': !exists(json, 'JettonTransfer') ? undefined : JettonTransferActionFromJSON(json['JettonTransfer']),
        'tonTransfer': !exists(json, 'TonTransfer') ? undefined : TonTransferActionFromJSON(json['TonTransfer']),
        'status': json['status'],
        'type': json['type'],
    };
}

export function ActionToJSON(value?: Action | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'JettonTransfer': JettonTransferActionToJSON(value.jettonTransfer),
        'TonTransfer': TonTransferActionToJSON(value.tonTransfer),
        'status': value.status,
        'type': value.type,
    };
}

