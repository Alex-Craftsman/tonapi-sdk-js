/* tslint:disable */
/* eslint-disable */
/**
 * REST api to TON blockchain explorer
 * Provide access to indexed TON blockchain
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@fslabs.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    AccountAddress,
    AccountAddressFromJSON,
    AccountAddressFromJSONTyped,
    AccountAddressToJSON,
} from './AccountAddress';
import {
    Jetton,
    JettonFromJSON,
    JettonFromJSONTyped,
    JettonToJSON,
} from './Jetton';

/**
 * 
 * @export
 * @interface JettonTransferAction
 */
export interface JettonTransferAction {
    /**
     * 
     * @type {AccountAddress}
     * @memberof JettonTransferAction
     */
    sender?: AccountAddress;
    /**
     * 
     * @type {AccountAddress}
     * @memberof JettonTransferAction
     */
    recipient?: AccountAddress;
    /**
     * 
     * @type {string}
     * @memberof JettonTransferAction
     */
    sendersWallet: string;
    /**
     * 
     * @type {string}
     * @memberof JettonTransferAction
     */
    recipientsWallet: string;
    /**
     * amount in quanta of tokens
     * @type {string}
     * @memberof JettonTransferAction
     */
    amount: string;
    /**
     * 
     * @type {string}
     * @memberof JettonTransferAction
     */
    comment?: string;
    /**
     * 
     * @type {Jetton}
     * @memberof JettonTransferAction
     */
    jetton: Jetton;
}

export function JettonTransferActionFromJSON(json: any): JettonTransferAction {
    return JettonTransferActionFromJSONTyped(json, false);
}

export function JettonTransferActionFromJSONTyped(json: any, ignoreDiscriminator: boolean): JettonTransferAction {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'sender': !exists(json, 'sender') ? undefined : AccountAddressFromJSON(json['sender']),
        'recipient': !exists(json, 'recipient') ? undefined : AccountAddressFromJSON(json['recipient']),
        'sendersWallet': json['senders_wallet'],
        'recipientsWallet': json['recipients_wallet'],
        'amount': json['amount'],
        'comment': !exists(json, 'comment') ? undefined : json['comment'],
        'jetton': JettonFromJSON(json['jetton']),
    };
}

export function JettonTransferActionToJSON(value?: JettonTransferAction | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'sender': AccountAddressToJSON(value.sender),
        'recipient': AccountAddressToJSON(value.recipient),
        'senders_wallet': value.sendersWallet,
        'recipients_wallet': value.recipientsWallet,
        'amount': value.amount,
        'comment': value.comment,
        'jetton': JettonToJSON(value.jetton),
    };
}

