/* tslint:disable */
/* eslint-disable */
/**
 * REST api to TON blockchain explorer
 * Provide access to indexed TON blockchain
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@fslabs.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Auctions,
  DomainBids,
} from '../models';
import {
    AuctionsFromJSON,
    AuctionsToJSON,
    DomainBidsFromJSON,
    DomainBidsToJSON,
} from '../models';

export interface GetDomainBidsRequest {
    domain: string;
}

/**
 * DomainAuctionsApi - interface
 * 
 * @export
 * @interface DomainAuctionsApiInterface
 */
export interface DomainAuctionsApiInterface {
    /**
     * Get all auctions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainAuctionsApiInterface
     */
    getAllAuctionsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Auctions>>;

    /**
     * Get all auctions
     */
    getAllAuctions(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Auctions>;

    /**
     * Get domain bids
     * @param {string} domain domain names with .ton
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DomainAuctionsApiInterface
     */
    getDomainBidsRaw(requestParameters: GetDomainBidsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DomainBids>>;

    /**
     * Get domain bids
     */
    getDomainBids(requestParameters: GetDomainBidsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainBids>;

}

/**
 * 
 */
export class DomainAuctionsApi extends runtime.BaseAPI implements DomainAuctionsApiInterface {

    /**
     * Get all auctions
     */
    async getAllAuctionsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Auctions>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWTAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/auction/getCurrent`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuctionsFromJSON(jsonValue));
    }

    /**
     * Get all auctions
     */
    async getAllAuctions(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Auctions> {
        const response = await this.getAllAuctionsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get domain bids
     */
    async getDomainBidsRaw(requestParameters: GetDomainBidsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DomainBids>> {
        if (requestParameters.domain === null || requestParameters.domain === undefined) {
            throw new runtime.RequiredError('domain','Required parameter requestParameters.domain was null or undefined when calling getDomainBids.');
        }

        const queryParameters: any = {};

        if (requestParameters.domain !== undefined) {
            queryParameters['domain'] = requestParameters.domain;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWTAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/auction/getBids`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DomainBidsFromJSON(jsonValue));
    }

    /**
     * Get domain bids
     */
    async getDomainBids(requestParameters: GetDomainBidsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DomainBids> {
        const response = await this.getDomainBidsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
